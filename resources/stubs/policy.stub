<?php

namespace App\Models\Policies;

use Illuminate\Auth\Access\HandlesAuthorization;
use {{ namespacedModel }};
use {{ namespacedUserModel }};

class {{ class }} extends BasePolicy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can create {{ model }}.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function create({{ user }} $user)
    {
        return true;
    }

    /**
     * Determine whether the user can view the {{ model }}.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function view({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        return $this->own($user, ${{ modelVariable }});
    }

    /**
     * Determine whether the user can view the collection of {{ model }}.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function viewAll({{ user }} $user)
    {
        return true;
    }

    /**
     * Determine whether the user can update the {{ model }}.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function update({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        return $this->own($user, ${{ modelVariable }});
    }

    /**
     * Determine whether the user can delete the {{ model }}.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function delete({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        return $this->own($user, ${{ modelVariable }});
    }

    /**
     * Determine whether the user owns the {{ model }}.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function own({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        return true;
    }

    /**
     * This function can be used to add conditions to the query builder,
     * which will specify the user's ownership of the model for the get collection query of this model
     *
     * @param  \{{ namespacedUserModel }}  $user A user object against which to construct the query. By default, the currently logged in user is used.
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder|null
     */
    public function qualifyCollectionQueryWithUser({{ user }} $user, $query)
    {
        return $query;
    }
}
